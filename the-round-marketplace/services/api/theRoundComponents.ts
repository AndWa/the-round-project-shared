/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useTheRoundContext, TheRoundContext } from "./theRoundContext";
import type * as Fetcher from "./theRoundFetcher";
import { theRoundFetch } from "./theRoundFetcher";
import type * as Schemas from "./theRoundSchemas";

export type VenueControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerCreateVariables = {
  body: Schemas.CreateVenueDto;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerCreate = (
  variables: VenueControllerCreateVariables
) =>
  theRoundFetch<
    Schemas.Venue,
    VenueControllerCreateError,
    Schemas.CreateVenueDto,
    {},
    {},
    {}
  >({ url: "/api/v1/venue", method: "post", ...variables });

export const useVenueControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Venue,
      VenueControllerCreateError,
      VenueControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Venue,
    VenueControllerCreateError,
    VenueControllerCreateVariables
  >(
    (variables: VenueControllerCreateVariables) =>
      fetchVenueControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type VenueControllerFindAllQueryParams = {
  id?: string;
  slug?: string;
};

export type VenueControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerFindAllResponse = Schemas.Venue[];

export type VenueControllerFindAllVariables = {
  queryParams?: VenueControllerFindAllQueryParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerFindAll = (
  variables: VenueControllerFindAllVariables
) =>
  theRoundFetch<
    VenueControllerFindAllResponse,
    VenueControllerFindAllError,
    undefined,
    {},
    VenueControllerFindAllQueryParams,
    {}
  >({ url: "/api/v1/venue", method: "get", ...variables });

export const useVenueControllerFindAll = (
  variables: VenueControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      VenueControllerFindAllResponse,
      VenueControllerFindAllError,
      VenueControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    VenueControllerFindAllResponse,
    VenueControllerFindAllError,
    VenueControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/venue",
      operationId: "venueControllerFindAll",
      variables,
    }),
    () => fetchVenueControllerFindAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type VenueControllerFindOnePathParams = {
  slug: string;
};

export type VenueControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerFindOneVariables = {
  pathParams: VenueControllerFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerFindOne = (
  variables: VenueControllerFindOneVariables
) =>
  theRoundFetch<
    Schemas.Venue,
    VenueControllerFindOneError,
    undefined,
    {},
    {},
    VenueControllerFindOnePathParams
  >({ url: "/api/v1/venue/{slug}", method: "get", ...variables });

export const useVenueControllerFindOne = (
  variables: VenueControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Venue,
      VenueControllerFindOneError,
      Schemas.Venue
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Venue,
    VenueControllerFindOneError,
    Schemas.Venue
  >(
    queryKeyFn({
      path: "/api/v1/venue/{slug}",
      operationId: "venueControllerFindOne",
      variables,
    }),
    () => fetchVenueControllerFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type VenueControllerFindEventsPathParams = {
  slug: string;
};

export type VenueControllerFindEventsError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerFindEventsResponse = Schemas.Event[];

export type VenueControllerFindEventsVariables = {
  pathParams: VenueControllerFindEventsPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerFindEvents = (
  variables: VenueControllerFindEventsVariables
) =>
  theRoundFetch<
    VenueControllerFindEventsResponse,
    VenueControllerFindEventsError,
    undefined,
    {},
    {},
    VenueControllerFindEventsPathParams
  >({ url: "/api/v1/venue/{slug}/events", method: "get", ...variables });

export const useVenueControllerFindEvents = (
  variables: VenueControllerFindEventsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      VenueControllerFindEventsResponse,
      VenueControllerFindEventsError,
      VenueControllerFindEventsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    VenueControllerFindEventsResponse,
    VenueControllerFindEventsError,
    VenueControllerFindEventsResponse
  >(
    queryKeyFn({
      path: "/api/v1/venue/{slug}/events",
      operationId: "venueControllerFindEvents",
      variables,
    }),
    () => fetchVenueControllerFindEvents({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type VenueControllerFindVenuePassPathParams = {
  slug: string;
};

export type VenueControllerFindVenuePassError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerFindVenuePassResponse = Schemas.Listing[];

export type VenueControllerFindVenuePassVariables = {
  pathParams: VenueControllerFindVenuePassPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerFindVenuePass = (
  variables: VenueControllerFindVenuePassVariables
) =>
  theRoundFetch<
    VenueControllerFindVenuePassResponse,
    VenueControllerFindVenuePassError,
    undefined,
    {},
    {},
    VenueControllerFindVenuePassPathParams
  >({ url: "/api/v1/venue/{slug}/pass", method: "get", ...variables });

export const useVenueControllerFindVenuePass = (
  variables: VenueControllerFindVenuePassVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      VenueControllerFindVenuePassResponse,
      VenueControllerFindVenuePassError,
      VenueControllerFindVenuePassResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    VenueControllerFindVenuePassResponse,
    VenueControllerFindVenuePassError,
    VenueControllerFindVenuePassResponse
  >(
    queryKeyFn({
      path: "/api/v1/venue/{slug}/pass",
      operationId: "venueControllerFindVenuePass",
      variables,
    }),
    () =>
      fetchVenueControllerFindVenuePass({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type VenueControllerFindAllMerchandisePathParams = {
  slug: string;
};

export type VenueControllerFindAllMerchandiseError =
  Fetcher.ErrorWrapper<undefined>;

export type VenueControllerFindAllMerchandiseResponse = Schemas.Listing[];

export type VenueControllerFindAllMerchandiseVariables = {
  pathParams: VenueControllerFindAllMerchandisePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerFindAllMerchandise = (
  variables: VenueControllerFindAllMerchandiseVariables
) =>
  theRoundFetch<
    VenueControllerFindAllMerchandiseResponse,
    VenueControllerFindAllMerchandiseError,
    undefined,
    {},
    {},
    VenueControllerFindAllMerchandisePathParams
  >({ url: "/api/v1/venue/{slug}/merchandise", method: "get", ...variables });

export const useVenueControllerFindAllMerchandise = (
  variables: VenueControllerFindAllMerchandiseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      VenueControllerFindAllMerchandiseResponse,
      VenueControllerFindAllMerchandiseError,
      VenueControllerFindAllMerchandiseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    VenueControllerFindAllMerchandiseResponse,
    VenueControllerFindAllMerchandiseError,
    VenueControllerFindAllMerchandiseResponse
  >(
    queryKeyFn({
      path: "/api/v1/venue/{slug}/merchandise",
      operationId: "venueControllerFindAllMerchandise",
      variables,
    }),
    () =>
      fetchVenueControllerFindAllMerchandise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type VenueControllerUpdatePathParams = {
  id: string;
};

export type VenueControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerUpdateVariables = {
  body?: Schemas.UpdateVenueDto;
  pathParams: VenueControllerUpdatePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerUpdate = (
  variables: VenueControllerUpdateVariables
) =>
  theRoundFetch<
    Schemas.Venue,
    VenueControllerUpdateError,
    Schemas.UpdateVenueDto,
    {},
    {},
    VenueControllerUpdatePathParams
  >({ url: "/api/v1/venue/{id}", method: "patch", ...variables });

export const useVenueControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Venue,
      VenueControllerUpdateError,
      VenueControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Venue,
    VenueControllerUpdateError,
    VenueControllerUpdateVariables
  >(
    (variables: VenueControllerUpdateVariables) =>
      fetchVenueControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type VenueControllerRemovePathParams = {
  id: string;
};

export type VenueControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type VenueControllerRemoveVariables = {
  pathParams: VenueControllerRemovePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchVenueControllerRemove = (
  variables: VenueControllerRemoveVariables
) =>
  theRoundFetch<
    Schemas.Venue,
    VenueControllerRemoveError,
    undefined,
    {},
    {},
    VenueControllerRemovePathParams
  >({ url: "/api/v1/venue/{id}", method: "delete", ...variables });

export const useVenueControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Venue,
      VenueControllerRemoveError,
      VenueControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Venue,
    VenueControllerRemoveError,
    VenueControllerRemoveVariables
  >(
    (variables: VenueControllerRemoveVariables) =>
      fetchVenueControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ListingControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerCreateVariables = {
  body: Schemas.CreateListingDto;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerCreate = (
  variables: ListingControllerCreateVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    ListingControllerCreateError,
    Schemas.CreateListingDto,
    {},
    {},
    {}
  >({ url: "/api/v1/listing", method: "post", ...variables });

export const useListingControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Listing,
      ListingControllerCreateError,
      ListingControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Listing,
    ListingControllerCreateError,
    ListingControllerCreateVariables
  >(
    (variables: ListingControllerCreateVariables) =>
      fetchListingControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ListingControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerFindAllResponse = Schemas.Listing[];

export type ListingControllerFindAllVariables =
  TheRoundContext["fetcherOptions"];

export const fetchListingControllerFindAll = (
  variables: ListingControllerFindAllVariables
) =>
  theRoundFetch<
    ListingControllerFindAllResponse,
    ListingControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/listing", method: "get", ...variables });

export const useListingControllerFindAll = (
  variables: ListingControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ListingControllerFindAllResponse,
      ListingControllerFindAllError,
      ListingControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    ListingControllerFindAllResponse,
    ListingControllerFindAllError,
    ListingControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/listing",
      operationId: "listingControllerFindAll",
      variables,
    }),
    () => fetchListingControllerFindAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ListingControllerFindOnePathParams = {
  id: string;
};

export type ListingControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerFindOneVariables = {
  pathParams: ListingControllerFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerFindOne = (
  variables: ListingControllerFindOneVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    ListingControllerFindOneError,
    undefined,
    {},
    {},
    ListingControllerFindOnePathParams
  >({ url: "/api/v1/listing/{id}", method: "get", ...variables });

export const useListingControllerFindOne = (
  variables: ListingControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Listing,
      ListingControllerFindOneError,
      Schemas.Listing
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Listing,
    ListingControllerFindOneError,
    Schemas.Listing
  >(
    queryKeyFn({
      path: "/api/v1/listing/{id}",
      operationId: "listingControllerFindOne",
      variables,
    }),
    () => fetchListingControllerFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ListingControllerUpdatePathParams = {
  id: string;
};

export type ListingControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerUpdateVariables = {
  body?: Schemas.UpdateListingDto;
  pathParams: ListingControllerUpdatePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerUpdate = (
  variables: ListingControllerUpdateVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    ListingControllerUpdateError,
    Schemas.UpdateListingDto,
    {},
    {},
    ListingControllerUpdatePathParams
  >({ url: "/api/v1/listing/{id}", method: "patch", ...variables });

export const useListingControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Listing,
      ListingControllerUpdateError,
      ListingControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Listing,
    ListingControllerUpdateError,
    ListingControllerUpdateVariables
  >(
    (variables: ListingControllerUpdateVariables) =>
      fetchListingControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ListingControllerRemovePathParams = {
  id: string;
};

export type ListingControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerRemoveVariables = {
  pathParams: ListingControllerRemovePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerRemove = (
  variables: ListingControllerRemoveVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    ListingControllerRemoveError,
    undefined,
    {},
    {},
    ListingControllerRemovePathParams
  >({ url: "/api/v1/listing/{id}", method: "delete", ...variables });

export const useListingControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Listing,
      ListingControllerRemoveError,
      ListingControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Listing,
    ListingControllerRemoveError,
    ListingControllerRemoveVariables
  >(
    (variables: ListingControllerRemoveVariables) =>
      fetchListingControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ListingControllerGetNftImagePathParams = {
  slug: string;
};

export type ListingControllerGetNftImageError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerGetNftImageVariables = {
  pathParams: ListingControllerGetNftImagePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerGetNftImage = (
  variables: ListingControllerGetNftImageVariables
) =>
  theRoundFetch<
    Record<string, any>,
    ListingControllerGetNftImageError,
    undefined,
    {},
    {},
    ListingControllerGetNftImagePathParams
  >({ url: "/api/v1/listing/{slug}/nft", method: "get", ...variables });

export const useListingControllerGetNftImage = (
  variables: ListingControllerGetNftImageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Record<string, any>,
      ListingControllerGetNftImageError,
      Record<string, any>
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Record<string, any>,
    ListingControllerGetNftImageError,
    Record<string, any>
  >(
    queryKeyFn({
      path: "/api/v1/listing/{slug}/nft",
      operationId: "listingControllerGetNftImage",
      variables,
    }),
    () =>
      fetchListingControllerGetNftImage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ListingControllerClaimListingPathParams = {
  tokenSeriesId: string;
};

export type ListingControllerClaimListingError =
  Fetcher.ErrorWrapper<undefined>;

export type ListingControllerClaimListingVariables = {
  pathParams: ListingControllerClaimListingPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerClaimListing = (
  variables: ListingControllerClaimListingVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    ListingControllerClaimListingError,
    undefined,
    {},
    {},
    ListingControllerClaimListingPathParams
  >({
    url: "/api/v1/listing/{tokenSeriesId}/claimed",
    method: "get",
    ...variables,
  });

export const useListingControllerClaimListing = (
  variables: ListingControllerClaimListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Listing,
      ListingControllerClaimListingError,
      Schemas.Listing
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Listing,
    ListingControllerClaimListingError,
    Schemas.Listing
  >(
    queryKeyFn({
      path: "/api/v1/listing/{tokenSeriesId}/claimed",
      operationId: "listingControllerClaimListing",
      variables,
    }),
    () =>
      fetchListingControllerClaimListing({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ListingControllerClaimedWebhookError =
  Fetcher.ErrorWrapper<undefined>;

export type ListingControllerClaimedWebhookVariables =
  TheRoundContext["fetcherOptions"];

export const fetchListingControllerClaimedWebhook = (
  variables: ListingControllerClaimedWebhookVariables
) =>
  theRoundFetch<
    undefined,
    ListingControllerClaimedWebhookError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/listing/claimed", method: "post", ...variables });

export const useListingControllerClaimedWebhook = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ListingControllerClaimedWebhookError,
      ListingControllerClaimedWebhookVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    ListingControllerClaimedWebhookError,
    ListingControllerClaimedWebhookVariables
  >(
    (variables: ListingControllerClaimedWebhookVariables) =>
      fetchListingControllerClaimedWebhook({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ListingControllerNftMediaPathParams = {
  tokenSeriesId: string;
};

export type ListingControllerNftMediaError = Fetcher.ErrorWrapper<undefined>;

export type ListingControllerNftMediaVariables = {
  pathParams: ListingControllerNftMediaPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchListingControllerNftMedia = (
  variables: ListingControllerNftMediaVariables
) =>
  theRoundFetch<
    Schemas.StreamableFile,
    ListingControllerNftMediaError,
    undefined,
    {},
    {},
    ListingControllerNftMediaPathParams
  >({
    url: "/api/v1/listing/{tokenSeriesId}/media",
    method: "get",
    ...variables,
  });

export const useListingControllerNftMedia = (
  variables: ListingControllerNftMediaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.StreamableFile,
      ListingControllerNftMediaError,
      Schemas.StreamableFile
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.StreamableFile,
    ListingControllerNftMediaError,
    Schemas.StreamableFile
  >(
    queryKeyFn({
      path: "/api/v1/listing/{tokenSeriesId}/media",
      operationId: "listingControllerNftMedia",
      variables,
    }),
    () => fetchListingControllerNftMedia({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EventControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type EventControllerCreateVariables = {
  body: Schemas.CreateEventDto;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerCreate = (
  variables: EventControllerCreateVariables
) =>
  theRoundFetch<
    Schemas.Event,
    EventControllerCreateError,
    Schemas.CreateEventDto,
    {},
    {},
    {}
  >({ url: "/api/v1/event", method: "post", ...variables });

export const useEventControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Event,
      EventControllerCreateError,
      EventControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Event,
    EventControllerCreateError,
    EventControllerCreateVariables
  >(
    (variables: EventControllerCreateVariables) =>
      fetchEventControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type EventControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type EventControllerFindAllResponse = Schemas.Event[];

export type EventControllerFindAllVariables = TheRoundContext["fetcherOptions"];

export const fetchEventControllerFindAll = (
  variables: EventControllerFindAllVariables
) =>
  theRoundFetch<
    EventControllerFindAllResponse,
    EventControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/event", method: "get", ...variables });

export const useEventControllerFindAll = (
  variables: EventControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EventControllerFindAllResponse,
      EventControllerFindAllError,
      EventControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    EventControllerFindAllResponse,
    EventControllerFindAllError,
    EventControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/event",
      operationId: "eventControllerFindAll",
      variables,
    }),
    () => fetchEventControllerFindAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EventControllerFindOnePathParams = {
  slug: string;
};

export type EventControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type EventControllerFindOneVariables = {
  pathParams: EventControllerFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerFindOne = (
  variables: EventControllerFindOneVariables
) =>
  theRoundFetch<
    Schemas.Event,
    EventControllerFindOneError,
    undefined,
    {},
    {},
    EventControllerFindOnePathParams
  >({ url: "/api/v1/event/{slug}", method: "get", ...variables });

export const useEventControllerFindOne = (
  variables: EventControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Event,
      EventControllerFindOneError,
      Schemas.Event
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Event,
    EventControllerFindOneError,
    Schemas.Event
  >(
    queryKeyFn({
      path: "/api/v1/event/{slug}",
      operationId: "eventControllerFindOne",
      variables,
    }),
    () => fetchEventControllerFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EventControllerFindAllTicketsPathParams = {
  slug: string;
};

export type EventControllerFindAllTicketsError =
  Fetcher.ErrorWrapper<undefined>;

export type EventControllerFindAllTicketsResponse = Schemas.Listing[];

export type EventControllerFindAllTicketsVariables = {
  pathParams: EventControllerFindAllTicketsPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerFindAllTickets = (
  variables: EventControllerFindAllTicketsVariables
) =>
  theRoundFetch<
    EventControllerFindAllTicketsResponse,
    EventControllerFindAllTicketsError,
    undefined,
    {},
    {},
    EventControllerFindAllTicketsPathParams
  >({ url: "/api/v1/event/{slug}/tickets", method: "get", ...variables });

export const useEventControllerFindAllTickets = (
  variables: EventControllerFindAllTicketsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EventControllerFindAllTicketsResponse,
      EventControllerFindAllTicketsError,
      EventControllerFindAllTicketsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    EventControllerFindAllTicketsResponse,
    EventControllerFindAllTicketsError,
    EventControllerFindAllTicketsResponse
  >(
    queryKeyFn({
      path: "/api/v1/event/{slug}/tickets",
      operationId: "eventControllerFindAllTickets",
      variables,
    }),
    () =>
      fetchEventControllerFindAllTickets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EventControllerFindAllMerchandisePathParams = {
  slug: string;
};

export type EventControllerFindAllMerchandiseError =
  Fetcher.ErrorWrapper<undefined>;

export type EventControllerFindAllMerchandiseResponse = Schemas.Listing[];

export type EventControllerFindAllMerchandiseVariables = {
  pathParams: EventControllerFindAllMerchandisePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerFindAllMerchandise = (
  variables: EventControllerFindAllMerchandiseVariables
) =>
  theRoundFetch<
    EventControllerFindAllMerchandiseResponse,
    EventControllerFindAllMerchandiseError,
    undefined,
    {},
    {},
    EventControllerFindAllMerchandisePathParams
  >({ url: "/api/v1/event/{slug}/merchandise", method: "get", ...variables });

export const useEventControllerFindAllMerchandise = (
  variables: EventControllerFindAllMerchandiseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EventControllerFindAllMerchandiseResponse,
      EventControllerFindAllMerchandiseError,
      EventControllerFindAllMerchandiseResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    EventControllerFindAllMerchandiseResponse,
    EventControllerFindAllMerchandiseError,
    EventControllerFindAllMerchandiseResponse
  >(
    queryKeyFn({
      path: "/api/v1/event/{slug}/merchandise",
      operationId: "eventControllerFindAllMerchandise",
      variables,
    }),
    () =>
      fetchEventControllerFindAllMerchandise({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type EventControllerUpdatePathParams = {
  id: string;
};

export type EventControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type EventControllerUpdateVariables = {
  body?: Schemas.UpdateEventDto;
  pathParams: EventControllerUpdatePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerUpdate = (
  variables: EventControllerUpdateVariables
) =>
  theRoundFetch<
    Schemas.Event,
    EventControllerUpdateError,
    Schemas.UpdateEventDto,
    {},
    {},
    EventControllerUpdatePathParams
  >({ url: "/api/v1/event/{id}", method: "patch", ...variables });

export const useEventControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Event,
      EventControllerUpdateError,
      EventControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Event,
    EventControllerUpdateError,
    EventControllerUpdateVariables
  >(
    (variables: EventControllerUpdateVariables) =>
      fetchEventControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type EventControllerRemovePathParams = {
  id: string;
};

export type EventControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type EventControllerRemoveVariables = {
  pathParams: EventControllerRemovePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchEventControllerRemove = (
  variables: EventControllerRemoveVariables
) =>
  theRoundFetch<
    Schemas.Event,
    EventControllerRemoveError,
    undefined,
    {},
    {},
    EventControllerRemovePathParams
  >({ url: "/api/v1/event/{id}", method: "delete", ...variables });

export const useEventControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Event,
      EventControllerRemoveError,
      EventControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Event,
    EventControllerRemoveError,
    EventControllerRemoveVariables
  >(
    (variables: EventControllerRemoveVariables) =>
      fetchEventControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerNearLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerNearLoginVariables = {
  body: Schemas.NearLoginDto;
} & TheRoundContext["fetcherOptions"];

export const fetchAuthControllerNearLogin = (
  variables: AuthControllerNearLoginVariables
) =>
  theRoundFetch<
    Schemas.Response,
    AuthControllerNearLoginError,
    Schemas.NearLoginDto,
    {},
    {},
    {}
  >({ url: "/api/v1/auth/near", method: "post", ...variables });

export const useAuthControllerNearLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Response,
      AuthControllerNearLoginError,
      AuthControllerNearLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Response,
    AuthControllerNearLoginError,
    AuthControllerNearLoginVariables
  >(
    (variables: AuthControllerNearLoginVariables) =>
      fetchAuthControllerNearLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AuthControllerFirebaseLoginError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerFirebaseLoginVariables = {
  body: Schemas.FirebaseLoginDto;
} & TheRoundContext["fetcherOptions"];

export const fetchAuthControllerFirebaseLogin = (
  variables: AuthControllerFirebaseLoginVariables
) =>
  theRoundFetch<
    Schemas.Response,
    AuthControllerFirebaseLoginError,
    Schemas.FirebaseLoginDto,
    {},
    {},
    {}
  >({ url: "/api/v1/auth/firebase", method: "post", ...variables });

export const useAuthControllerFirebaseLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Response,
      AuthControllerFirebaseLoginError,
      AuthControllerFirebaseLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.Response,
    AuthControllerFirebaseLoginError,
    AuthControllerFirebaseLoginVariables
  >(
    (variables: AuthControllerFirebaseLoginVariables) =>
      fetchAuthControllerFirebaseLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerGenerateOtpPasswordError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerGenerateOtpPasswordVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerGenerateOtpPassword = (
  variables: UserControllerGenerateOtpPasswordVariables
) =>
  theRoundFetch<
    Schemas.OtpResponse,
    UserControllerGenerateOtpPasswordError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/otp-generate", method: "get", ...variables });

export const useUserControllerGenerateOtpPassword = (
  variables: UserControllerGenerateOtpPasswordVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OtpResponse,
      UserControllerGenerateOtpPasswordError,
      Schemas.OtpResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.OtpResponse,
    UserControllerGenerateOtpPasswordError,
    Schemas.OtpResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/otp-generate",
      operationId: "userControllerGenerateOtpPassword",
      variables,
    }),
    () =>
      fetchUserControllerGenerateOtpPassword({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerValidateOtpError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerValidateOtpVariables = {
  body: Schemas.OtpBody;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerValidateOtp = (
  variables: UserControllerValidateOtpVariables
) =>
  theRoundFetch<
    Schemas.User,
    UserControllerValidateOtpError,
    Schemas.OtpBody,
    {},
    {},
    {}
  >({ url: "/api/v1/user/otp-validate", method: "post", ...variables });

export const useUserControllerValidateOtp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UserControllerValidateOtpError,
      UserControllerValidateOtpVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.User,
    UserControllerValidateOtpError,
    UserControllerValidateOtpVariables
  >(
    (variables: UserControllerValidateOtpVariables) =>
      fetchUserControllerValidateOtp({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerValidateOtpMobileError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerValidateOtpMobileVariables = {
  body: Schemas.OtpBody;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerValidateOtpMobile = (
  variables: UserControllerValidateOtpMobileVariables
) =>
  theRoundFetch<
    Schemas.User,
    UserControllerValidateOtpMobileError,
    Schemas.OtpBody,
    {},
    {},
    {}
  >({ url: "/api/v1/user/otp-validate-mobile", method: "post", ...variables });

export const useUserControllerValidateOtpMobile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UserControllerValidateOtpMobileError,
      UserControllerValidateOtpMobileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    Schemas.User,
    UserControllerValidateOtpMobileError,
    UserControllerValidateOtpMobileVariables
  >(
    (variables: UserControllerValidateOtpMobileVariables) =>
      fetchUserControllerValidateOtpMobile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindMeError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindMeVariables = TheRoundContext["fetcherOptions"];

export const fetchUserControllerFindMe = (
  variables: UserControllerFindMeVariables
) =>
  theRoundFetch<Schemas.User, UserControllerFindMeError, undefined, {}, {}, {}>(
    { url: "/api/v1/user/me", method: "get", ...variables }
  );

export const useUserControllerFindMe = (
  variables: UserControllerFindMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.User,
      UserControllerFindMeError,
      Schemas.User
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.User,
    UserControllerFindMeError,
    Schemas.User
  >(
    queryKeyFn({
      path: "/api/v1/user/me",
      operationId: "userControllerFindMe",
      variables,
    }),
    () => fetchUserControllerFindMe({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerVenuesOwnedError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerVenuesOwnedResponse = Schemas.Venue[];

export type UserControllerVenuesOwnedVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerVenuesOwned = (
  variables: UserControllerVenuesOwnedVariables
) =>
  theRoundFetch<
    UserControllerVenuesOwnedResponse,
    UserControllerVenuesOwnedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/venues/owned", method: "get", ...variables });

export const useUserControllerVenuesOwned = (
  variables: UserControllerVenuesOwnedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerVenuesOwnedResponse,
      UserControllerVenuesOwnedError,
      UserControllerVenuesOwnedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerVenuesOwnedResponse,
    UserControllerVenuesOwnedError,
    UserControllerVenuesOwnedResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/venues/owned",
      operationId: "userControllerVenuesOwned",
      variables,
    }),
    () => fetchUserControllerVenuesOwned({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerVenuesAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerVenuesAllResponse = Schemas.Venue[];

export type UserControllerVenuesAllVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerVenuesAll = (
  variables: UserControllerVenuesAllVariables
) =>
  theRoundFetch<
    UserControllerVenuesAllResponse,
    UserControllerVenuesAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/venues/all", method: "get", ...variables });

export const useUserControllerVenuesAll = (
  variables: UserControllerVenuesAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerVenuesAllResponse,
      UserControllerVenuesAllError,
      UserControllerVenuesAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerVenuesAllResponse,
    UserControllerVenuesAllError,
    UserControllerVenuesAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/venues/all",
      operationId: "userControllerVenuesAll",
      variables,
    }),
    () => fetchUserControllerVenuesAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerEventsOwnedByVenueSlugPathParams = {
  slug: string;
};

export type UserControllerEventsOwnedByVenueSlugError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerEventsOwnedByVenueSlugResponse = Schemas.Event[];

export type UserControllerEventsOwnedByVenueSlugVariables = {
  pathParams: UserControllerEventsOwnedByVenueSlugPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerEventsOwnedByVenueSlug = (
  variables: UserControllerEventsOwnedByVenueSlugVariables
) =>
  theRoundFetch<
    UserControllerEventsOwnedByVenueSlugResponse,
    UserControllerEventsOwnedByVenueSlugError,
    undefined,
    {},
    {},
    UserControllerEventsOwnedByVenueSlugPathParams
  >({
    url: "/api/v1/user/venues/{slug}/events/owned",
    method: "get",
    ...variables,
  });

export const useUserControllerEventsOwnedByVenueSlug = (
  variables: UserControllerEventsOwnedByVenueSlugVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerEventsOwnedByVenueSlugResponse,
      UserControllerEventsOwnedByVenueSlugError,
      UserControllerEventsOwnedByVenueSlugResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerEventsOwnedByVenueSlugResponse,
    UserControllerEventsOwnedByVenueSlugError,
    UserControllerEventsOwnedByVenueSlugResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/venues/{slug}/events/owned",
      operationId: "userControllerEventsOwnedByVenueSlug",
      variables,
    }),
    () =>
      fetchUserControllerEventsOwnedByVenueSlug({
        ...fetcherOptions,
        ...variables,
      }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerEventsAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerEventsAllResponse = Schemas.Event[];

export type UserControllerEventsAllVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerEventsAll = (
  variables: UserControllerEventsAllVariables
) =>
  theRoundFetch<
    UserControllerEventsAllResponse,
    UserControllerEventsAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/events/all", method: "get", ...variables });

export const useUserControllerEventsAll = (
  variables: UserControllerEventsAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerEventsAllResponse,
      UserControllerEventsAllError,
      UserControllerEventsAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerEventsAllResponse,
    UserControllerEventsAllError,
    UserControllerEventsAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/events/all",
      operationId: "userControllerEventsAll",
      variables,
    }),
    () => fetchUserControllerEventsAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerListingOwnedError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerListingOwnedResponse = Schemas.Listing[];

export type UserControllerListingOwnedVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerListingOwned = (
  variables: UserControllerListingOwnedVariables
) =>
  theRoundFetch<
    UserControllerListingOwnedResponse,
    UserControllerListingOwnedError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/listing/owned", method: "get", ...variables });

export const useUserControllerListingOwned = (
  variables: UserControllerListingOwnedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerListingOwnedResponse,
      UserControllerListingOwnedError,
      UserControllerListingOwnedResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerListingOwnedResponse,
    UserControllerListingOwnedError,
    UserControllerListingOwnedResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/listing/owned",
      operationId: "userControllerListingOwned",
      variables,
    }),
    () => fetchUserControllerListingOwned({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerListingAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerListingAllResponse = Schemas.Listing[];

export type UserControllerListingAllVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerListingAll = (
  variables: UserControllerListingAllVariables
) =>
  theRoundFetch<
    UserControllerListingAllResponse,
    UserControllerListingAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/listing/all", method: "get", ...variables });

export const useUserControllerListingAll = (
  variables: UserControllerListingAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerListingAllResponse,
      UserControllerListingAllError,
      UserControllerListingAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerListingAllResponse,
    UserControllerListingAllError,
    UserControllerListingAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/listing/all",
      operationId: "userControllerListingAll",
      variables,
    }),
    () => fetchUserControllerListingAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerVenuesFindOnePathParams = {
  slug: string;
};

export type UserControllerVenuesFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerVenuesFindOneVariables = {
  pathParams: UserControllerVenuesFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerVenuesFindOne = (
  variables: UserControllerVenuesFindOneVariables
) =>
  theRoundFetch<
    Schemas.Venue,
    UserControllerVenuesFindOneError,
    undefined,
    {},
    {},
    UserControllerVenuesFindOnePathParams
  >({ url: "/api/v1/user/venues/{slug}", method: "get", ...variables });

export const useUserControllerVenuesFindOne = (
  variables: UserControllerVenuesFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Venue,
      UserControllerVenuesFindOneError,
      Schemas.Venue
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Venue,
    UserControllerVenuesFindOneError,
    Schemas.Venue
  >(
    queryKeyFn({
      path: "/api/v1/user/venues/{slug}",
      operationId: "userControllerVenuesFindOne",
      variables,
    }),
    () => fetchUserControllerVenuesFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerEventsFindOnePathParams = {
  slug: string;
};

export type UserControllerEventsFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerEventsFindOneVariables = {
  pathParams: UserControllerEventsFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerEventsFindOne = (
  variables: UserControllerEventsFindOneVariables
) =>
  theRoundFetch<
    Schemas.Event,
    UserControllerEventsFindOneError,
    undefined,
    {},
    {},
    UserControllerEventsFindOnePathParams
  >({ url: "/api/v1/user/events/{slug}", method: "get", ...variables });

export const useUserControllerEventsFindOne = (
  variables: UserControllerEventsFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Event,
      UserControllerEventsFindOneError,
      Schemas.Event
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Event,
    UserControllerEventsFindOneError,
    Schemas.Event
  >(
    queryKeyFn({
      path: "/api/v1/user/events/{slug}",
      operationId: "userControllerEventsFindOne",
      variables,
    }),
    () => fetchUserControllerEventsFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerListingFindOnePathParams = {
  slug: string;
};

export type UserControllerListingFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerListingFindOneVariables = {
  pathParams: UserControllerListingFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerListingFindOne = (
  variables: UserControllerListingFindOneVariables
) =>
  theRoundFetch<
    Schemas.Listing,
    UserControllerListingFindOneError,
    undefined,
    {},
    {},
    UserControllerListingFindOnePathParams
  >({ url: "/api/v1/user/listing/{slug}", method: "get", ...variables });

export const useUserControllerListingFindOne = (
  variables: UserControllerListingFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Listing,
      UserControllerListingFindOneError,
      Schemas.Listing
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    Schemas.Listing,
    UserControllerListingFindOneError,
    Schemas.Listing
  >(
    queryKeyFn({
      path: "/api/v1/user/listing/{slug}",
      operationId: "userControllerListingFindOne",
      variables,
    }),
    () =>
      fetchUserControllerListingFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerCreateVariables = {
  body?: Schemas.CreateUserDto;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerCreate = (
  variables: UserControllerCreateVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: "/api/v1/user", method: "post", ...variables });

export const useUserControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerCreateError,
      UserControllerCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerCreateError,
    UserControllerCreateVariables
  >(
    (variables: UserControllerCreateVariables) =>
      fetchUserControllerCreate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindAllResponse = Schemas.User[];

export type UserControllerFindAllVariables = TheRoundContext["fetcherOptions"];

export const fetchUserControllerFindAll = (
  variables: UserControllerFindAllVariables
) =>
  theRoundFetch<
    UserControllerFindAllResponse,
    UserControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user", method: "get", ...variables });

export const useUserControllerFindAll = (
  variables: UserControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerFindAllResponse,
      UserControllerFindAllError,
      UserControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerFindAllResponse,
    UserControllerFindAllError,
    UserControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/api/v1/user",
      operationId: "userControllerFindAll",
      variables,
    }),
    () => fetchUserControllerFindAll({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerFindOnePathParams = {
  uid: string;
};

export type UserControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindOneVariables = {
  pathParams: UserControllerFindOnePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerFindOne = (
  variables: UserControllerFindOneVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerFindOneError,
    undefined,
    {},
    {},
    UserControllerFindOnePathParams
  >({ url: "/api/v1/user/{uid}", method: "get", ...variables });

export const useUserControllerFindOne = (
  variables: UserControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      UserControllerFindOneError,
      undefined
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<undefined, UserControllerFindOneError, undefined>(
    queryKeyFn({
      path: "/api/v1/user/{uid}",
      operationId: "userControllerFindOne",
      variables,
    }),
    () => fetchUserControllerFindOne({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UserControllerUpdatePathParams = {
  id: string;
};

export type UserControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerUpdateVariables = {
  body?: Schemas.UpdateUserDto;
  pathParams: UserControllerUpdatePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerUpdate = (
  variables: UserControllerUpdateVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerUpdateError,
    Schemas.UpdateUserDto,
    {},
    {},
    UserControllerUpdatePathParams
  >({ url: "/api/v1/user/{id}", method: "patch", ...variables });

export const useUserControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerUpdateError,
      UserControllerUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerUpdateError,
    UserControllerUpdateVariables
  >(
    (variables: UserControllerUpdateVariables) =>
      fetchUserControllerUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerRemovePathParams = {
  id: string;
};

export type UserControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerRemoveVariables = {
  pathParams: UserControllerRemovePathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerRemove = (
  variables: UserControllerRemoveVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerRemoveError,
    undefined,
    {},
    {},
    UserControllerRemovePathParams
  >({ url: "/api/v1/user/{id}", method: "delete", ...variables });

export const useUserControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerRemoveError,
      UserControllerRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerRemoveError,
    UserControllerRemoveVariables
  >(
    (variables: UserControllerRemoveVariables) =>
      fetchUserControllerRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerAddToWhitelistPathParams = {
  id: string;
};

export type UserControllerAddToWhitelistError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerAddToWhitelistVariables = {
  pathParams: UserControllerAddToWhitelistPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerAddToWhitelist = (
  variables: UserControllerAddToWhitelistVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerAddToWhitelistError,
    undefined,
    {},
    {},
    UserControllerAddToWhitelistPathParams
  >({ url: "/api/v1/user/{id}/whitelist", method: "patch", ...variables });

export const useUserControllerAddToWhitelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerAddToWhitelistError,
      UserControllerAddToWhitelistVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerAddToWhitelistError,
    UserControllerAddToWhitelistVariables
  >(
    (variables: UserControllerAddToWhitelistVariables) =>
      fetchUserControllerAddToWhitelist({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UserControllerRemoveFromWhitelistPathParams = {
  id: string;
};

export type UserControllerRemoveFromWhitelistError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerRemoveFromWhitelistVariables = {
  pathParams: UserControllerRemoveFromWhitelistPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerRemoveFromWhitelist = (
  variables: UserControllerRemoveFromWhitelistVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerRemoveFromWhitelistError,
    undefined,
    {},
    {},
    UserControllerRemoveFromWhitelistPathParams
  >({ url: "/api/v1/user/{id}/unwhitelist", method: "patch", ...variables });

export const useUserControllerRemoveFromWhitelist = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerRemoveFromWhitelistError,
      UserControllerRemoveFromWhitelistVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerRemoveFromWhitelistError,
    UserControllerRemoveFromWhitelistVariables
  >(
    (variables: UserControllerRemoveFromWhitelistVariables) =>
      fetchUserControllerRemoveFromWhitelist({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UserControllerToogleEventBookmarkPathParams = {
  eventId: string;
};

export type UserControllerToogleEventBookmarkError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerToogleEventBookmarkVariables = {
  pathParams: UserControllerToogleEventBookmarkPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerToogleEventBookmark = (
  variables: UserControllerToogleEventBookmarkVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerToogleEventBookmarkError,
    undefined,
    {},
    {},
    UserControllerToogleEventBookmarkPathParams
  >({
    url: "/api/v1/user/toogle-event-bookmark/{eventId}",
    method: "post",
    ...variables,
  });

export const useUserControllerToogleEventBookmark = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerToogleEventBookmarkError,
      UserControllerToogleEventBookmarkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerToogleEventBookmarkError,
    UserControllerToogleEventBookmarkVariables
  >(
    (variables: UserControllerToogleEventBookmarkVariables) =>
      fetchUserControllerToogleEventBookmark({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UserControllerToggleVenueBookmarkPathParams = {
  venueId: string;
};

export type UserControllerToggleVenueBookmarkError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerToggleVenueBookmarkVariables = {
  pathParams: UserControllerToggleVenueBookmarkPathParams;
} & TheRoundContext["fetcherOptions"];

export const fetchUserControllerToggleVenueBookmark = (
  variables: UserControllerToggleVenueBookmarkVariables
) =>
  theRoundFetch<
    undefined,
    UserControllerToggleVenueBookmarkError,
    undefined,
    {},
    {},
    UserControllerToggleVenueBookmarkPathParams
  >({
    url: "/api/v1/user/toogle-venue-bookmark/{venueId}",
    method: "post",
    ...variables,
  });

export const useUserControllerToggleVenueBookmark = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserControllerToggleVenueBookmarkError,
      UserControllerToggleVenueBookmarkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTheRoundContext();
  return reactQuery.useMutation<
    undefined,
    UserControllerToggleVenueBookmarkError,
    UserControllerToggleVenueBookmarkVariables
  >(
    (variables: UserControllerToggleVenueBookmarkVariables) =>
      fetchUserControllerToggleVenueBookmark({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type UserControllerOwnedNftsError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerOwnedNftsResponse = Schemas.Listing[];

export type UserControllerOwnedNftsVariables =
  TheRoundContext["fetcherOptions"];

export const fetchUserControllerOwnedNfts = (
  variables: UserControllerOwnedNftsVariables
) =>
  theRoundFetch<
    UserControllerOwnedNftsResponse,
    UserControllerOwnedNftsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/user/nfts/owned", method: "get", ...variables });

export const useUserControllerOwnedNfts = (
  variables: UserControllerOwnedNftsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserControllerOwnedNftsResponse,
      UserControllerOwnedNftsError,
      UserControllerOwnedNftsResponse
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useTheRoundContext(options);
  return reactQuery.useQuery<
    UserControllerOwnedNftsResponse,
    UserControllerOwnedNftsError,
    UserControllerOwnedNftsResponse
  >(
    queryKeyFn({
      path: "/api/v1/user/nfts/owned",
      operationId: "userControllerOwnedNfts",
      variables,
    }),
    () => fetchUserControllerOwnedNfts({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/venue";
      operationId: "venueControllerFindAll";
      variables: VenueControllerFindAllVariables;
    }
  | {
      path: "/api/v1/venue/{slug}";
      operationId: "venueControllerFindOne";
      variables: VenueControllerFindOneVariables;
    }
  | {
      path: "/api/v1/venue/{slug}/events";
      operationId: "venueControllerFindEvents";
      variables: VenueControllerFindEventsVariables;
    }
  | {
      path: "/api/v1/venue/{slug}/pass";
      operationId: "venueControllerFindVenuePass";
      variables: VenueControllerFindVenuePassVariables;
    }
  | {
      path: "/api/v1/venue/{slug}/merchandise";
      operationId: "venueControllerFindAllMerchandise";
      variables: VenueControllerFindAllMerchandiseVariables;
    }
  | {
      path: "/api/v1/listing";
      operationId: "listingControllerFindAll";
      variables: ListingControllerFindAllVariables;
    }
  | {
      path: "/api/v1/listing/{id}";
      operationId: "listingControllerFindOne";
      variables: ListingControllerFindOneVariables;
    }
  | {
      path: "/api/v1/listing/{slug}/nft";
      operationId: "listingControllerGetNftImage";
      variables: ListingControllerGetNftImageVariables;
    }
  | {
      path: "/api/v1/listing/{tokenSeriesId}/claimed";
      operationId: "listingControllerClaimListing";
      variables: ListingControllerClaimListingVariables;
    }
  | {
      path: "/api/v1/listing/{tokenSeriesId}/media";
      operationId: "listingControllerNftMedia";
      variables: ListingControllerNftMediaVariables;
    }
  | {
      path: "/api/v1/event";
      operationId: "eventControllerFindAll";
      variables: EventControllerFindAllVariables;
    }
  | {
      path: "/api/v1/event/{slug}";
      operationId: "eventControllerFindOne";
      variables: EventControllerFindOneVariables;
    }
  | {
      path: "/api/v1/event/{slug}/tickets";
      operationId: "eventControllerFindAllTickets";
      variables: EventControllerFindAllTicketsVariables;
    }
  | {
      path: "/api/v1/event/{slug}/merchandise";
      operationId: "eventControllerFindAllMerchandise";
      variables: EventControllerFindAllMerchandiseVariables;
    }
  | {
      path: "/api/v1/user/otp-generate";
      operationId: "userControllerGenerateOtpPassword";
      variables: UserControllerGenerateOtpPasswordVariables;
    }
  | {
      path: "/api/v1/user/me";
      operationId: "userControllerFindMe";
      variables: UserControllerFindMeVariables;
    }
  | {
      path: "/api/v1/user/venues/owned";
      operationId: "userControllerVenuesOwned";
      variables: UserControllerVenuesOwnedVariables;
    }
  | {
      path: "/api/v1/user/venues/all";
      operationId: "userControllerVenuesAll";
      variables: UserControllerVenuesAllVariables;
    }
  | {
      path: "/api/v1/user/venues/{slug}/events/owned";
      operationId: "userControllerEventsOwnedByVenueSlug";
      variables: UserControllerEventsOwnedByVenueSlugVariables;
    }
  | {
      path: "/api/v1/user/events/all";
      operationId: "userControllerEventsAll";
      variables: UserControllerEventsAllVariables;
    }
  | {
      path: "/api/v1/user/listing/owned";
      operationId: "userControllerListingOwned";
      variables: UserControllerListingOwnedVariables;
    }
  | {
      path: "/api/v1/user/listing/all";
      operationId: "userControllerListingAll";
      variables: UserControllerListingAllVariables;
    }
  | {
      path: "/api/v1/user/venues/{slug}";
      operationId: "userControllerVenuesFindOne";
      variables: UserControllerVenuesFindOneVariables;
    }
  | {
      path: "/api/v1/user/events/{slug}";
      operationId: "userControllerEventsFindOne";
      variables: UserControllerEventsFindOneVariables;
    }
  | {
      path: "/api/v1/user/listing/{slug}";
      operationId: "userControllerListingFindOne";
      variables: UserControllerListingFindOneVariables;
    }
  | {
      path: "/api/v1/user";
      operationId: "userControllerFindAll";
      variables: UserControllerFindAllVariables;
    }
  | {
      path: "/api/v1/user/{uid}";
      operationId: "userControllerFindOne";
      variables: UserControllerFindOneVariables;
    }
  | {
      path: "/api/v1/user/nfts/owned";
      operationId: "userControllerOwnedNfts";
      variables: UserControllerOwnedNftsVariables;
    };
